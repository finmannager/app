@page "/home"
@inject TransactionService TransactionService
@inject NavigationManager NavigationManager
@using AppFinancia.Services;
@using AppFinancia.Models;
@using CreditCardApp.Models;
@inject IJSRuntime JS
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage

<PageTitle>Home</PageTitle>

<div class="home-page">
   <i class="bi bi-person fs-3"></i> <h2>Ola! @userName</h2>
</div>

<!-- Cartões de Resumo -->
<div class="row mb-4">

    <div class="col-md-4">
    <div class="card text-white bg-info">
        <div class="card-header">Saldo Geral</div>
        <div class="card-body "> <!-- Centraliza o conteúdo dentro do card-body -->
            <h5 class="card-title">@SaldoGeral.ToString("C")</h5>

            <!-- Botões centralizados e arredondados dentro do Cartão Saldo Geral -->
            <div class="d-flex justify-content-center mt-3"> <!-- Flex container para centralizar -->
                <button type="button" class="btn btn-light btn-sm me-2 rounded-pill" @onclick="GoToAddTransaction">
                    <i class="bi bi-plus-circle"></i> Add
                </button>
                <button type="button" class="btn btn-warning btn-sm me-2 rounded-pill" @onclick="GoToCartao"> <!-- Botão "Cartão" com cor amarela -->
                    <i class="bi bi-gear"></i> Cartão
                </button>
                <button type="button" class="btn btn-light btn-sm me-2 rounded-pill" @onclick="GoToListTransactions">
                    <i class="bi bi-list"></i> Transações
                </button>
                <button class="btn btn-secondary btn-sm rounded-pill" @onclick="GoToReports"> <!-- Botão "Relatório" com ícone verde -->
                    <i class="bi bi-file-earmark-text"></i> Relatório
                </button>
            </div>

        </div>
    </div>
</div>



   <div class="col-md-4">
    <div class="d-flex"> <!-- Div Flex para colocar os dois cartões lado a lado -->
        <!-- Cartão Despesa Mensal -->
        <div class="card text-white bg-danger me-2" style="flex: 1;">
            <div class="card-header">Despesa Mensal</div>
            <div class="card-body">
                <h5 class="card-title">@DespesaMensal.ToString("C")</h5>
            </div>
        </div>

        <!-- Cartão Receita Mensal -->
        <div class="card text-white bg-success" style="flex: 1;">
            <div class="card-header">Receita Mensal</div>
            <div class="card-body">
                <h5 class="card-title">@ReceitaMensal.ToString("C")</h5>
            </div>
        </div>
    </div>
</div>

    
</div>
<div class="container my-4">
    <div class="row">
        <!-- Primeira Div com Título e Cor -->
        <div class="col-md-4">
            
           <!-- Seleção de Cartão -->
            <div class="form-group text-white" style="background-color: #080706;">
                <label for="selectedCard">Selecione o Cartão:</label>
                <select class="form-control " @onchange="OnCardChanged">
                    @foreach (var card in creditCards)
                    {
                        <option value="@card.CardName">@card.CardName</option>
                    }
                </select>
            </div>

            <!-- Resumo do Cartão Selecionado -->
            <div class="card mb-3 text-white" style="background-color: #9a39f5;">
                <div class="card-body">
                    <h5 class="card-title">Cartão: @selectedCard?.CardName</h5>
                    <p class="card-text">Limite: @selectedCard?.CreditLimit.ToString("C")</p>
                    <p class="card-text">Saldo Disponível: @availableBalance.ToString("C")</p>
                </div>
            </div>
        </div>

        <!-- Segunda Div com Título e Cor -->
<div class="col-md-4">
    <h5 class="text-center">Destaque:</h5>
    <div class="card p-3" style="background-color: #f8f7f1; color: black;"> <!-- Amarelo claro e texto preto -->
        <div class="d-flex align-items-center">
            <div class="me-2">
                <img src="logo-99.png" alt="Logo dinheiro" width="40" height="40"> <!-- Pequena logo simbolizando dinheiro -->
            </div>
            <div>
                <p style="font-weight: bold;">Pode Ganhar R$507 em recompensas</p> <!-- Texto em negrito -->
                <p style="font-size: 0.875rem; color: gray;">para cada amigo que convidar!.</p>
            </div>
        </div>
        <button class="btn btn-sm me-2 rounded-pill btn-warning" 
        style=" font-weight: bold; color: black; font-size: 0.75rem;" @onclick="GoToIndicar99">Quero agora</button>
    </div>
</div>


        <!-- Terceira Div com Título e Cor -->
         <div class="col-md-4">
            <h5 class="text-center"></h5>
            <div class="card p-3 text-white" style="background-color: #f0f0f000;"> <!-- Verde -->
                
            </div>
        </div>
        
    </div>
</div>



@code {
    private decimal ReceitaMensal => _transactions.Where(t => !t.IsExpense && t.Date.Month == DateTime.Today.Month && t.Date.Year == DateTime.Today.Year).Sum(t => t.Amount);
    private decimal DespesaMensal => _transactions.Where(t => t.IsExpense && t.Date.Month == DateTime.Today.Month && t.Date.Year == DateTime.Today.Year).Sum(t => t.Amount);
    private decimal SaldoGeral => _transactions.Where(t => !t.IsExpense).Sum(t => t.Amount) - _transactions.Where(t => t.IsExpense).Sum(t => t.Amount);
    private List<CreditCard> creditCards = new List<CreditCard>();
    private List<CreditCardTransaction> transactions = new List<CreditCardTransaction>();
    private string selectedCardName;
    private CreditCard selectedCard;
    private decimal availableBalance;
    private List<CreditCardTransaction> filteredTransactions = new List<CreditCardTransaction>();
    
    private string userName = "Carregando...";

    private List<Transaction> _transactions = new List<Transaction>();

    protected override async Task OnInitializedAsync()
    {
        _transactions = await TransactionService.GetTransactionsAsync();

        // Recupera o e-mail do LocalStorage
        var userEmail = await JS.InvokeAsync<string>("localStorage.getItem", "userEmail");

        if (!string.IsNullOrEmpty(userEmail))
        {
            // Busca o nome do usuário no Firebase com base no e-mail
            userName = await JS.InvokeAsync<string>("getUserNameByEmail", userEmail);
        }
        else
        {
            userName = "Usuário não identificado";
        }

 // Carrega as transações do LocalStorage
        var storedTransactions = await LocalStorage.GetItemAsync<List<CreditCardTransaction>>("creditCardTransactions");
        if (storedTransactions != null)
        {
            transactions = storedTransactions;
            FilterCurrentMonth();
        }


         // Carrega os cartões de crédito do LocalStorage
        var storedCards = await LocalStorage.GetItemAsync<List<CreditCard>>("creditCards");
        if (storedCards != null)
        {
            creditCards = storedCards;
            selectedCardName = creditCards.FirstOrDefault()?.CardName; 
            selectedCard = creditCards.FirstOrDefault();
        }

        // Calcula o saldo disponível (Exemplo de lógica, ajuste conforme sua necessidade)
        availableBalance = (selectedCard?.CreditLimit ?? 0) - transactions
    .Where(t => t.CreditCardName == selectedCardName)
    .Sum(t => t.Amount);

    }

     private async Task OnCardChanged(ChangeEventArgs e)
    {
        selectedCardName = e.Value.ToString();
        selectedCard = creditCards.FirstOrDefault(c => c.CardName == selectedCardName);
        FilterCurrentMonth();
    }

    private void FilterCurrentMonth()
    {
        if (!string.IsNullOrEmpty(selectedCardName))
        {
            var currentMonth = DateTime.Now.Month;
            var currentYear = DateTime.Now.Year;
            
            filteredTransactions = transactions
                .Where(t => t.CreditCardName == selectedCardName && t.DueDate.Month == currentMonth && t.DueDate.Year == currentYear)
                .ToList();
        }
    }
    private void GoToAddTransaction()
    {
        NavigationManager.NavigateTo("add-transaction");
    }

    private void GoToListTransactions()
    {
        NavigationManager.NavigateTo("lista-transaction");
    }
     private void GoToReports()
    {
        NavigationManager.NavigateTo("reports");
    }

     private void GoToCartao()
    {
        NavigationManager.NavigateTo("credit-card-overview");
    }

    private void GoToIndicar99()
    {
        NavigationManager.NavigateTo("indicacao-99");
    }
}
<style>
    .home-page {
        background-color: #e0f7e9;
        
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        text-align: center;
        color: #333;
    }
</style>
